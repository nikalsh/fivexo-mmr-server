{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\Leaderboard.svelte",
    "..\\..\\PlayerBox.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Leaderboard from \"./Leaderboard.svelte\";\n  import Game from \"./Game.svelte\";\n  import PlayerBox from \"./PlayerBox.svelte\";\n  import OpponentBox from \"./OpponentBox.svelte\";\n  import GameButtons from \"./GameButtons.svelte\";\n  import { onMount } from \"svelte\";\n  import * as requests from \"./utils/requests.js\";\n  import { playerStore, gameStore } from \"./stores.js\";\n  import * as cookies from \"./utils/cookies.js\";\n  import { get } from \"svelte/store\";\n\n  let renderGame = true;\n\n  console.log(\"Rendergame: \" + renderGame);\n\n  onMount(async () => {\n    await init();\n  });\n\n  async function init() {\n    if (cookies.playerIdMissing()) {\n      const res = await requests.fetchNewId();\n      const player = res.data;\n      cookies.setCookie(\"playerId\", player.id, 360);\n      playerStore.set(player);\n    } else {\n      const playerIdCookie = cookies.getCookie(\"playerId\");\n      const res = await requests.fetchStatsById(playerIdCookie);\n      console.log(res.data);\n      const player = res.data;\n      playerStore.set(player);\n    }\n  }\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n    display: inline;\n  }\n\n  :root {\n    background-color: darkslategray;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  .container {\n    height: 80%;\n    width: 100%;\n    display: flex;\n  }\n  .leftThing {\n    position: relative;\n\n    width: 25%;\n    /* background-color: blue; */\n    text-align: center;\n  }\n  .content {\n    width: 50%;\n    /* background-color: green; */\n  }\n  .rightThing {\n    width: 25%;\n    /* background-color: yellow; */\n  }\n\n  .vertical {\n    float: bottom;\n    margin-left: auto;\n    height: 50%;\n  }\n</style>\n\n<main>\n  <div class=\"container\">\n\n    <div class=\"leftThing\">\n      <PlayerBox />\n\n    </div>\n\n    <div class=\"content\">\n\n      {#if renderGame}\n        <Game />\n      {:else}\n        <Game />\n      {/if}\n      <GameButtons bind:init={renderGame} />\n\n      <Leaderboard />\n\n    </div>\n\n    <div class=\"rightThing\">\n\n      <OpponentBox />\n\n    </div>\n\n  </div>\n\n</main>\n",
    "<script>\r\n  import {\r\n    queueStore,\r\n    gameStore,\r\n    gameSocketStore,\r\n    gameCharacterStore\r\n  } from \"./stores.js\";\r\n  import { onDestroy } from \"svelte\";\r\n\r\n  let rows = 15;\r\n  let cols = 15;\r\n  let grid;\r\n\r\n  let character,\r\n    turn = false;\r\n  let gameOver = false;\r\n\r\n  let winnerCharacter = null;\r\n\r\n  const gameCharacterStoreUnsubscribe = gameCharacterStore.subscribe(\r\n    characterStore => {\r\n      if (characterStore) {\r\n        character = characterStore.character;\r\n        turn = characterStore.turn;\r\n      }\r\n    }\r\n  );\r\n\r\n  const gameStoreUnsubscribe = gameStore.subscribe(game => {\r\n    if (game) {\r\n      grid = game.grid;\r\n      gameOver = game.gameOver;\r\n      if (gameOver) {\r\n        winnerCharacter = game.winnerCharacter;\r\n        // $queueStore.set(undefined)\r\n        // $gameSocketStore.close();\r\n      }\r\n    }\r\n  });\r\n\r\n  const canPlace = (character, turn, gameOver) =>\r\n    myTurn(character, turn) && !gameOver;\r\n\r\n  const myTurn = (character, turn) =>\r\n    !!character && !!turn && turn == character;\r\n\r\n  onDestroy(gameCharacterStoreUnsubscribe, gameStoreUnsubscribe);\r\n\r\n  function initGrid() {\r\n    grid = [...Array(rows)].map(x => Array(cols).fill(\"\"));\r\n    character = false;\r\n    turn = false;\r\n    gameOver = false;\r\n  }\r\n\r\n  function handleClick(character, turn, gameOver, i, j) {\r\n    if (canPlace(character, turn, gameOver) && grid[i][j] === \"\") {\r\n      $gameSocketStore.send(i + \" \" + j);\r\n      grid[i][j] = $gameCharacterStore.character;\r\n      console.log(i + \" \" + j);\r\n    }\r\n  }\r\n\r\n  initGrid();\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    margin: 0;\r\n    color: white;\r\n  }\r\n  button {\r\n    margin: 0;\r\n    text-align: center;\r\n    width: 40px;\r\n    height: 40px;\r\n    font-weight: 600;\r\n    vertical-align: top;\r\n  }\r\n\r\n  .enabled {\r\n    cursor: pointer;\r\n    background-color: pink;\r\n  }\r\n</style>\r\n\r\n<main>\r\n  <h1>Five In A Row</h1>\r\n  {#each grid as row, i}\r\n    {#each row as col, j}\r\n      <button\r\n        class:enabled={canPlace(character, turn, gameOver)}\r\n        disabled={!canPlace(character, turn, gameOver)}\r\n        on:click={() => handleClick(character, turn, gameOver, i, j)}>\r\n        {grid[i][j]}\r\n      </button>\r\n    {/each}\r\n    <br />\r\n  {/each}\r\n\r\n  {#if !!!gameOver}\r\n    {#if !!character && !!turn}\r\n      {#if character === turn}\r\n        <p>Your turn</p>\r\n      {:else}\r\n        <p>Opponents' turn</p>\r\n      {/if}\r\n      <p>You: {character}</p>\r\n    {/if}\r\n  {:else}\r\n    <p>{winnerCharacter === character ? 'You win!' : 'You lose!'}</p>\r\n  {/if}\r\n\r\n</main>\r\n",
    "<script>\r\n  import * as requests from \"./utils/requests.js\";\r\n\r\n  let leaderboard;\r\n\r\n  function getWinPercent(player) {\r\n    const winPercent = calculateWinPercent(player);\r\n    return isNaN(winPercent) ? 0 : winPercent;\r\n  }\r\n\r\n  function calculateWinPercent(player) {\r\n    return Math.trunc(\r\n      (player.wins / (player.wins + player.losses + player.ties)) * 100\r\n    );\r\n  }\r\n\r\n  async function updateLeaderboard() {\r\n    return requests.fetchAllStats();\r\n  }\r\n\r\n  setInterval(async () => {\r\n    let res = await updateLeaderboard();\r\n    leaderboard = res.data;\r\n  }, 1000);\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    text-align: center;\r\n    padding: 1em;\r\n    max-width: 100vh;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  table {\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n    /* padding: 150px; */\r\n    box-shadow: 10px 10px 1px black;\r\n  }\r\n\r\n  td,\r\n  th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n  }\r\n\r\n  tr:nth-child(even) {\r\n    background-color: #dddddd;\r\n  }\r\n\r\n  tr:nth-child(odd) {\r\n    background-color: white;\r\n  }\r\n\r\n  .greentext {\r\n    color: green;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .redtext {\r\n    color: red;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .goldentext {\r\n    color: goldenrod;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .bold {\r\n    font-weight: bold;\r\n  }\r\n\r\n  @media (min-width: 640px) {\r\n    main {\r\n      max-width: none;\r\n    }\r\n  }\r\n</style>\r\n\r\n<main>\r\n  {#if !leaderboard}\r\n    <p>Loading leaderboard..</p>\r\n  {:else}\r\n    <table class=\"leaderboard\">\r\n      <tr>\r\n        <th>Level</th>\r\n        <th>Name</th>\r\n        <th>Wins</th>\r\n        <th>Losses</th>\r\n        <th>Ties</th>\r\n        <th>Games</th>\r\n        <th>Win%</th>\r\n        <th>MMR</th>\r\n      </tr>\r\n      {#each leaderboard as player, i}\r\n        <tr>\r\n          <td class={i === 0 ? 'goldentext' : 'bold'}>{player.level}</td>\r\n          <td class=\"bold\">{player.name}</td>\r\n          <td class=\"greentext\">{player.wins}</td>\r\n          <td class=\"redtext\">{player.losses}</td>\r\n          <td class=\"redtext\">{player.ties}</td>\r\n          <td class=\"bold\">{player.wins + player.losses + player.ties}</td>\r\n          <td class=\"greentext\">{getWinPercent(player)}%</td>\r\n          <td class=\"bold\">{player.experience}</td>\r\n        </tr>\r\n      {/each}\r\n    </table>\r\n  {/if}\r\n</main>\r\n",
    "<script>\r\n  import { onDestroy, onMount } from \"svelte\";\r\n  import { playerStore } from \"./stores.js\";\r\n  import * as requests from \"./utils/requests.js\";\r\n\r\n  let player;\r\n  let name;\r\n  let showOptions = false;\r\n\r\n  const unsubscribe = playerStore.subscribe(storedPlayer => {\r\n    player = storedPlayer;\r\n    name = storedPlayer.name;\r\n  });\r\n\r\n  onDestroy(unsubscribe);\r\n\r\n  async function setName(name) {\r\n    if (name) {\r\n      let res = await requests.setNewName(player.id, name);\r\n      playerStore.set(res.data);\r\n    }\r\n  }\r\n\r\n  async function resetId() {\r\n    let res = await requests.fetchNewId();\r\n    playerStore.set(res.data);\r\n  }\r\n\r\n  setInterval(async () => {\r\n    let res = await requests.fetchStatsById(player.id);\r\n    player = res.data;\r\n  }, 1000);\r\n</script>\r\n\r\n<style>\r\n  p {\r\n    color: white;\r\n  }\r\n\r\n  button.link {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: white;\r\n  }\r\n\r\n  button.link:hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  table {\r\n    display: inline-block;\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n    /* padding: 150px; */\r\n    box-shadow: 10px 10px 1px black;\r\n    /* margin-left: auto; */\r\n    /* margin-right: auto; */\r\n  }\r\n\r\n  .wrapper {\r\n    margin: 0;\r\n    position: absolute;\r\n    height: 100%;\r\n    top: 75%;\r\n    left: 50%;\r\n    margin-right: -50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n\r\n  td,\r\n  th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n  }\r\n\r\n  tr:nth-child(even) {\r\n    background-color: #dddddd;\r\n  }\r\n\r\n  tr:nth-child(odd) {\r\n    background-color: white;\r\n  }\r\n\r\n  .greentext {\r\n    color: green;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .redtext {\r\n    color: red;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .goldentext {\r\n    color: goldenrod;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .bold {\r\n    font-weight: bold;\r\n  }\r\n</style>\r\n\r\n<gui>\r\n  <div class=\"wrapper\">\r\n    {#if player}\r\n      <p>You</p>\r\n      <table>\r\n        <tr>\r\n          <td class=\"bold\">Name</td>\r\n          <td>{player.name}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">ID</td>\r\n          <td>{player.id}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">Level</td>\r\n          <td>{player.level}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">Wins</td>\r\n          <td>{player.wins}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">Losses</td>\r\n          <td>{player.losses}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">Ties</td>\r\n          <td>{player.ties}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"bold\">MMR</td>\r\n          <td>{player.experience}</td>\r\n        </tr>\r\n      </table>\r\n      <p>\r\n        <button\r\n          on:click={() => {\r\n            showOptions = !showOptions;\r\n          }}\r\n          class=\"link\">\r\n          Clicky\r\n        </button>\r\n      </p>\r\n      {#if showOptions}\r\n        <p>\r\n          Name\r\n          <input bind:value={name} />\r\n        </p>\r\n        <button on:click={() => setName(name)}>Save</button>\r\n        <button on:click={resetId}>Reset ID</button>\r\n      {/if}\r\n    {/if}\r\n\r\n  </div>\r\n\r\n</gui>\r\n"
  ],
  "names": [],
  "mappings": "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"
}